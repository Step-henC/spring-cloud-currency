spring.application.name=currency-exchange-service
#connect to spring cloud config server
spring.config.import=optional:configserver:http://localhost:8888

#limits-service is port 8080 and config server is 8888
server.port=8000

#show sql statements 
spring.jpa.show-sql=true

#configure standard url instead of rando generated
spring.datasource.url=jdbc:h2:mem:testdb

#show h2 console
spring.h2.console.enabled=true

#defer execution of data.sql since it will automatically update data
spring.jpa.defer-datasource-initialization=true

#to make this service a eureka client auto picked up by eureka srver, add dependency
# <dependency>
# 			<groupId>org.springframework.cloud</groupId>
# 			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
# 		</dependency>
# not necessary with single eureka server but in case we want multi eureka servers
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka


#circuit breaker retry
resilience4j.retry.instances.sample-api.maxAttempts=5
resilience4j.retry.instances.sample-api.wait-duration=1s

#after first failed request, it will wait a little longer before the next request
resilience4j.retry.instances.sample-api.enable-exponential-backoff=true


#we can customize configuration if failure rate reaches 90% then
# circuitbreaker will reach open state and redirect calls 
# else circuitbreaker will reach its default closed state
resilience4j.circuitbreaker.instances.default.failure-rate-threshold=90

#IF you want to yaml-ize Circuitbreaker config, 
# create an application.yaml profile in this directory

#this is saying I want 2 requests every 10 seconds
resilience4j.ratelimiter.instances.default.limit-for-period=2
resilience4j.ratelimiter.instances.default.limit-refresh-period=10s


# only 10 concurrent call 
# replace "default" with any specific name
# place specific name in name property of @Bulkhead annotation in controller method
resilience4j.bulkhead.instances.default.max-concurrent-calls=10